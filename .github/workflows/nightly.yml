---
name: Nightly Build and Publish
'on':
  schedule:
    - cron: '0 3 * * 1,3,5'
  workflow_dispatch: null
env:
  UV_SYSTEM_PYTHON: 1
jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: '${{ steps.check.outputs.has-changes }}'
      last-nightly-commit: '${{ steps.check.outputs.last-nightly-commit }}'
      current-commit: '${{ steps.check.outputs.current-commit }}'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check for changes since last nightly
        id: check
        run: >
          # Get the latest nightly release tag

          LATEST_NIGHTLY_TAG=$(git tag --list "nightly-*"
          --sort=-version:refname | head -n 1)


          if [ -z "$LATEST_NIGHTLY_TAG" ]; then
            echo "No nightly tags found, will build (first time)"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "last-nightly-commit=" >> $GITHUB_OUTPUT
            echo "current-commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            exit 0
          fi


          # Get the commit hash from the latest nightly tag

          LATEST_NIGHTLY_COMMIT=$(git rev-list -n 1 "$LATEST_NIGHTLY_TAG")

          CURRENT_COMMIT=$(git rev-parse HEAD)


          echo "last-nightly-commit=${LATEST_NIGHTLY_COMMIT}" >> $GITHUB_OUTPUT

          echo "current-commit=${CURRENT_COMMIT}" >> $GITHUB_OUTPUT


          # Check if there are any commits since the last nightly

          if [ "$LATEST_NIGHTLY_COMMIT" = "$CURRENT_COMMIT" ]; then
            echo "No changes since last nightly build"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected since last nightly build"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
  nightly-build:
    needs: check-changes
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    name: 'Test py ${{ matrix.python-version }}'
    steps:
      - uses: actions/checkout@v5
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install dependencies
        run: |
          uv sync --all-extras
      - name: Test with pytest
        run: |
          uv run task test
      - name: Run linting checks
        run: |
          uv run task ruff-check
          uv run task type-check
      - name: Build documentation
        run: |
          uv run task doc-clean-build
  nightly-publish:
    needs:
      - check-changes
      - nightly-build
    if: needs.check-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install dependencies
        run: |
          uv sync --all-extras
      - name: Generate nightly version
        id: version
        run: |
          # Generate nightly version based on current date and commit
          DATE=$(date +%Y%m%d)
          COMMIT=$(git rev-parse --short HEAD)
          NIGHTLY_VERSION="${DATE}.dev0+${COMMIT}"
          echo "nightly_version=${NIGHTLY_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated nightly version: ${NIGHTLY_VERSION}"
      - name: Update version files
        run: >
          # Update version in __init__.py

          sed -i "s/__version__ = .*/__version__ = \"${{
          steps.version.outputs.nightly_version }}\"/" altair/__init__.py

          # Update version in conf.py

          sed -i "s/release = .*/release = \"${{
          steps.version.outputs.nightly_version }}\"/" doc/conf.py
      - name: Build package
        run: |
          uv run task build
      - name: Sign wheel with Sigstore
        uses: sigstore/gha-cosign-installer@v4.0.0
        with:
          cosign-release: v2.2.0
      - name: Sign wheel
        run: >
          cosign sign-blob dist/altair-${{ steps.version.outputs.nightly_version
          }}-py3-none-any.whl \
            --output-signature dist/altair-${{ steps.version.outputs.nightly_version }}-py3-none-any.whl.sig \
            --output-certificate dist/altair-${{ steps.version.outputs.nightly_version }}-py3-none-any.whl.cert
      - name: Generate dependency diff
        id: deps
        run: |
          # Get current dependencies
          uv pip freeze > current_deps.txt

          # Get previous nightly dependencies if available
          if [ -f "previous_deps.txt" ]; then
            diff -u previous_deps.txt current_deps.txt > dependency_diff.txt || true
            echo "dependency_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No previous dependencies found (first nightly build)" > dependency_diff.txt
            echo "dependency_changes=false" >> $GITHUB_OUTPUT
          fi

          # Save current deps for next run
          cp current_deps.txt previous_deps.txt
      - name: Generate binary file checksums
        id: checksums
        run: >
          # Find all binary files in the project

          find . -name "*.csv.gz" -o -name "*.parquet" -o -name "*.json.gz" |
          while read file; do
            if [ -f "$file" ]; then
              # Generate SHA256 checksum
              sha256sum "$file" >> binary_checksums.txt
              echo "Processed: $file"
            fi
          done


          # Compare with previous checksums if available

          if [ -f "previous_checksums.txt" ]; then
            echo "=== Binary File Changes ===" > binary_changes.txt
            diff -u previous_checksums.txt binary_checksums.txt >> binary_changes.txt || true
            echo "binary_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No previous binary checksums found (first nightly build)" > binary_changes.txt
            echo "binary_changes=false" >> $GITHUB_OUTPUT
          fi


          # Save current checksums for next run

          cp binary_checksums.txt previous_checksums.txt
      - name: Create GitHub release with assets
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: 'nightly-${{ steps.version.outputs.nightly_version }}'
          release_name: 'Nightly Build ${{ steps.version.outputs.nightly_version }}'
          body: >
            Nightly build of Altair


            **Version:** ${{ steps.version.outputs.nightly_version }}

            **Commit:** ${{ github.sha }}

            **Date:** ${{ github.event.schedule }}

            **Changes since last nightly:** ${{
            needs.check-changes.outputs.last-nightly-commit }}


            This is a pre-release version for testing purposes.


            ## Installation


            ### From GitHub Release

            Download the wheel file from the assets below and install:

            ```bash

            pip install altair-${{ steps.version.outputs.nightly_version
            }}-py3-none-any.whl

            ```


            ### From GitHub Repository

            ```bash

            pip install git+https://github.com/vega/altair.git@${{ github.sha }}

            ```
          draft: false
          prerelease: true
      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: >-
            ./dist/altair-${{ steps.version.outputs.nightly_version
            }}-py3-none-any.whl
          asset_name: 'altair-${{ steps.version.outputs.nightly_version }}-py3-none-any.whl'
          asset_content_type: application/octet-stream
      - name: Upload signatures to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: >-
            ./dist/altair-${{ steps.version.outputs.nightly_version
            }}-py3-none-any.whl.sig
          asset_name: >-
            altair-${{ steps.version.outputs.nightly_version
            }}-py3-none-any.whl.sig
          asset_content_type: application/octet-stream
      - name: Upload certificates to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: >-
            ./dist/altair-${{ steps.version.outputs.nightly_version
            }}-py3-none-any.whl.cert
          asset_name: >-
            altair-${{ steps.version.outputs.nightly_version
            }}-py3-none-any.whl.cert
          asset_content_type: application/octet-stream
      - name: Upload dependency diff to release
        if: steps.deps.outputs.dependency_changes == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./dependency_diff.txt
          asset_name: dependency_diff.txt
          asset_content_type: text/plain
      - name: Upload binary changes to release
        if: steps.checksums.outputs.binary_changes == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./binary_changes.txt
          asset_name: binary_changes.txt
          asset_content_type: text/plain
      - name: Upload full checksums to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./binary_checksums.txt
          asset_name: binary_checksums.txt
          asset_content_type: text/plain
